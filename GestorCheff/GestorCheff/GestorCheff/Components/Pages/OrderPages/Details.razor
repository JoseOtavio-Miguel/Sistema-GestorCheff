@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using GestorCheff.Models
@inject IDbContextFactory<GestorCheff.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Order</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@order.UserId</dd>
            <dt class="col-sm-2">OrderDate</dt>
            <dd class="col-sm-10">@order.OrderDate</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@order.Status</dd>
            <dt class="col-sm-2">TotalAmount</dt>
            <dd class="col-sm-10">@order.TotalAmount</dd>
            <dt class="col-sm-2">IdLoja</dt>
            <dd class="col-sm-10">@order.IdLoja</dd>
        </dl>
        <div>
            <a href="@($"/orders/edit?orderid={order.OrderId}")">Edit</a> |
            <a href="@($"/orders")">Back to List</a>
        </div>
    }
</div>

@code {
    private Order? order;

    [SupplyParameterFromQuery]
    private long OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.Order.FirstOrDefaultAsync(m => m.OrderId == OrderId);

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
