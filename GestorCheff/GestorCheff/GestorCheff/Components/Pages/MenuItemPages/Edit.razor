@page "/menuitems/edit"
@using Microsoft.EntityFrameworkCore
@using GestorCheff.Models
@inject IDbContextFactory<GestorCheff.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>MenuItem</h2>
<hr />
@if (MenuItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="MenuItem" OnValidSubmit="UpdateMenuItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="MenuItem.IdItem" value="@MenuItem.IdItem" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="MenuItem.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => MenuItem.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="MenuItem.Description" class="form-control" />
                    <ValidationMessage For="() => MenuItem.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="MenuItem.Price" class="form-control" />
                    <ValidationMessage For="() => MenuItem.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputText id="category" @bind-Value="MenuItem.Category" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => MenuItem.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isavailable" class="form-label">IsAvailable:</label>
                    <InputCheckbox id="isavailable" @bind-Value="MenuItem.IsAvailable" class="form-check-input" />
                    <ValidationMessage For="() => MenuItem.IsAvailable" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itemtype" class="form-label">ItemType:</label>
                    <InputText id="itemtype" @bind-Value="MenuItem.ItemType" class="form-control" />
                    <ValidationMessage For="() => MenuItem.ItemType" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/menuitems">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private long IdItem { get; set; }

    [SupplyParameterFromForm]
    private MenuItem? MenuItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        MenuItem ??= await context.MenuItem.FirstOrDefaultAsync(m => m.IdItem == IdItem);

        if (MenuItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMenuItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(MenuItem!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MenuItemExists(MenuItem!.IdItem))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/menuitems");
    }

    private bool MenuItemExists(long iditem)
    {
        using var context = DbFactory.CreateDbContext();
        return context.MenuItem.Any(e => e.IdItem == iditem);
    }
}
