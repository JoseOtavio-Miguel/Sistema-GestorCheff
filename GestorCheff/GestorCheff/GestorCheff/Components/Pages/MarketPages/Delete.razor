@page "/markets/delete"
@using Microsoft.EntityFrameworkCore
@using GestorCheff.Models
@inject IDbContextFactory<GestorCheff.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Market</h2>
    <hr />
    @if (market is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Proprietario</dt>
            <dd class="col-sm-10">@market.Proprietario</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NomeLoja</dt>
            <dd class="col-sm-10">@market.NomeLoja</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CNPJ</dt>
            <dd class="col-sm-10">@market.CNPJ</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Telefone</dt>
            <dd class="col-sm-10">@market.Telefone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@market.Email</dd>
        </dl>
        <EditForm method="post" Model="market" OnValidSubmit="DeleteMarket" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(market is null)">Delete</button> |
            <a href="/markets">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Market? market;

    [SupplyParameterFromQuery]
    private long IdLoja { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        market = await context.Loja.FirstOrDefaultAsync(m => m.IdLoja == IdLoja);

        if (market is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMarket()
    {
        using var context = DbFactory.CreateDbContext();
        context.Loja.Remove(market!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/markets");
    }
}
